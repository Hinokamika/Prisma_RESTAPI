generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_authentication {
  id            Int          @id @default(autoincrement())
  email         String       @unique(map: "email") @db.VarChar(255)
  password_hash String       @db.VarChar(255)
  user_auth_id  String?      @unique(map: "user_auth_id") @db.VarChar(50)
  created_at    DateTime?    @default(now()) @db.Timestamp(0)
  last_login    DateTime?    @db.Timestamp(0)
  user_detail   user_detail?
}

model user_detail {
  id                            Int                                 @id @default(autoincrement())
  user_id                       Int                                 @unique(map: "user_id")
  name                          String                              @db.VarChar(255)
  date_of_birth                 DateTime                            @db.Date
  gender                        user_detail_gender
  primary_health_goal           user_detail_primary_health_goal
  specific_fitness_goals        Json?
  fitness_level                 user_detail_fitness_level
  exercise_status               user_detail_exercise_status
  phone                         String?                             @db.VarChar(20)
  allergies                     Json?
  preferred_workout_time        user_detail_preferred_workout_time?
  available_equipment           Json?
  dietary_preferences           Json?
  dietary_restrictions          Json?
  current_stat_id               Int?
  preferred_nutrition_plan_id   Int?
  preferred_health_activity_id  Int?
  preferred_exercise_routine_id Int?
  profile_picture_url           String?                             @db.VarChar(500)
  timezone                      String?                             @default("UTC") @db.VarChar(50)
  language_preference           String?                             @default("vn") @db.VarChar(10)
  notification_preferences      Json?
  privacy_settings              Json?
  subscription_type             user_detail_subscription_type?      @default(free)
  created_at                    DateTime?                           @default(now()) @db.Timestamp(0)
  updated_at                    DateTime?                           @default(now()) @db.Timestamp(0)
  user_authentication           user_authentication                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "id")
  user_exercise_log             user_exercise_log[]
  user_health_log               user_health_log[]
  user_nutrition_log            user_nutrition_log[]
}

model user_exercise_log {
  id                Int                                  @id @default(autoincrement())
  user_id           Int
  exercise_id       Int
  date_performed    DateTime                             @db.Date
  duration_minutes  Int?
  sets_completed    Int?
  reps_completed    Int?
  weight_used_kg    Decimal?                             @db.Decimal(5, 2)
  calories_burned   Int?
  difficulty_rating user_exercise_log_difficulty_rating?
  notes             String?                              @db.Text
  created_at        DateTime?                            @default(now()) @db.Timestamp(0)
  user_detail       user_detail                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_exercise_log_ibfk_1")

  @@index([user_id, date_performed], map: "idx_user_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_health_log {
  id                   Int                                  @id @default(autoincrement())
  user_id              Int
  health_activity_id   Int
  date_performed       DateTime                             @db.Date
  start_time           DateTime?                            @db.Time(0)
  duration_minutes     Int
  completion_status    user_health_log_completion_status?   @default(completed)
  stress_level_before  user_health_log_stress_level_before?
  stress_level_after   user_health_log_stress_level_after?
  mood_before          user_health_log_mood_before?
  mood_after           user_health_log_mood_after?
  effectiveness_rating Int?
  notes                String?                              @db.Text
  created_at           DateTime?                            @default(now()) @db.Timestamp(0)
  user_detail          user_detail                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_health_log_ibfk_1")

  @@index([user_id, date_performed], map: "idx_user_date")
}

model user_nutrition_log {
  id             Int         @id @default(autoincrement())
  user_id        Int
  nutrition_id   Int
  date_consumed  DateTime    @db.Date
  meal_time      DateTime?   @db.Time(0)
  serving_amount Decimal?    @default(1.00) @db.Decimal(5, 2)
  total_calories Decimal?    @db.Decimal(6, 2)
  notes          String?     @db.Text
  created_at     DateTime?   @default(now()) @db.Timestamp(0)
  user_detail    user_detail @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_nutrition_log_ibfk_1")

  @@index([user_id, date_consumed], map: "idx_user_date")
}

enum user_detail_gender {
  male
  female
  other
  prefer_not_to_say
}

enum user_detail_primary_health_goal {
  weight_loss
  weight_gain
  muscle_building
  endurance
  flexibility
  general_fitness
  stress_reduction
  rehabilitation
}

enum user_health_log_completion_status {
  completed
  partial
  skipped
}

enum user_detail_fitness_level {
  beginner
  intermediate
  advanced
}

enum user_health_log_stress_level_before {
  low
  moderate
  high
}

enum user_detail_exercise_status {
  sedentary
  lightly_active
  moderately_active
  very_active
  extremely_active
}

enum user_health_log_stress_level_after {
  low
  moderate
  high
}

enum user_health_log_mood_before {
  poor
  fair
  good
  excellent
}

enum user_exercise_log_difficulty_rating {
  too_easy
  just_right
  too_hard
}

enum user_health_log_mood_after {
  poor
  fair
  good
  excellent
}

enum user_detail_preferred_workout_time {
  morning
  afternoon
  evening
  flexible
}

enum user_detail_subscription_type {
  free
  premium
  pro
}
